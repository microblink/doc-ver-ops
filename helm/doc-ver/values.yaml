auth:
  license:
    # -- name of license-key secret, if changed, it must be updated in doc-ver-api
    secretName: "license-key"
    # -- enable if you want to create license secret as part of this charts deployment
    createSecret: false
    # -- if createSecret is set to true, set the license key here
    licenseKey: ""
    # -- App identifier from microblink developer hub
    applicationId: ""
  dbCreds:
    # -- name of the secret, this string value must be updated in both postgresql and embedding-store
    secretName: "mb-docver-db-creds"
    # -- if you do not expect multiple database users and db will not be exposed to any external traffic, set this to true and it will create secret
    # used by both embedding-store and postgresql (if postgresql is deployed as part of this helm release)
    createSecret: true
    # -- if createSecret is set to true, set the database username here, if you update this value, make sure to update
    # the value in the postgresql section as well (if postgresql is enabled). 
    # if you are using "external db" like cloud SQL or RDS, set this to the username you have created in the database
    username: "embedding-store-sa"
    # -- if createSecret is set to true, set the database password here, we don't expect to have external traffic to the database, so
    # we can use fixed password. If you want to manage user credentials password outside of this helm release simply create a secret
    # with the name you specified under secretName, and disable createSecret. Contents of this secret are just two fields 
    # `EMBEDDING_STORE_PGVECTOR_USERNAME` and `EMBEDDING_STORE_PGVECTOR_PASSWORD` - first holding the username and second holding the password 
    # of the database user you want our service to use.
    # Check out the templates/db-creds.yaml for more details on the content of the secret
    password: "x9xv1mw0td"

doc-ver-api:
  # -- if autoscaling.enabled is false, deployment will run replicaCount replicas
  replicaCount: 1
  # -- if set, overrides app.kubernetes.io/name
  nameOverride: "doc-ver-api"
  # -- if set, overrides deployment, hpa, ingress, and service metadata.name
  fullnameOverride: ""
  image:
    # -- deployment docker image repository
    repository: us-central1-docker.pkg.dev/document-verification-public/docver-gcm/web-api-doc-ver
    # -- deployment docker image pull policy
    pullPolicy: Always
    # -- deployment docker image tag, if not set, version will be used as tag
    tag: "3.5.1"
    # -- deployment docker image pull secrets
    pullSecrets: []
  service:
    # -- service type
    type: ClusterIP
    # -- service and container port
    port: 8080
  resources:
    limits:
      # -- deployment resource cpu limit
      cpu: 500m
      # -- deployment resource memory limit
      memory: 1Gi
    requests:
      # -- deployment resource cpu requests
      cpu: 250m
      # -- deployment resource memory requests
      memory: 256Mi
  autoscaling:
    # -- if enabled, deployment will be autoscaled
    enabled: false
    # -- min replicas hpa will scale down to
    minReplicas: 1
    # -- max replicas hpa will scale up to
    maxReplicas: 3
    memory:
      # -- if enabled, hpa will scale based on memory usage
      enabled: false
      # -- target memory usage percentage
      target: 80
    cpu:
      # -- if enabled, hpa will scale based on cpu usage
      enabled: true
      # -- target cpu usage percentage
      target: 80
  ingress:
    # -- enable if you want to expose the service
    enabled: false
    className: ""
    annotations: {}
#      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
#      nginx.ingress.kubernetes.io/ssl-redirect: "true"
#      nginx.ingress.kubernetes.io/proxy-body-size: 100m
#      nginx.ingress.kubernetes.io/client-max-body-size: 50m
#      nginx.ingress.kubernetes.io/enable-cors: "true"
#      nginx.ingress.kubernetes.io/cors-allow-origin: "*"
#      cert-manager.io/cluster-issuer: letsencrypt-production
    tls:
      - secretName: docver-tls
        hosts:
          # -- if you want to expose the service, set the host name
          - "docver.microblink.com"
    hosts:
      # -- if you want to expose the service, set the host name
      - host: "docver.microblink.com"
        paths: ["/docver/", "/api/"]
    pathType: ImplementationSpecific

  env:
    Runner__Pools__3.0__Address: "dns:///docver-runner:8081"
  # -- deployment node selector
  nodeSelector: {}
  # -- deployment tolerations
  tolerations: []
  # -- deployment podAnnotations
  podAnnotations: {}
  # -- deployment affinity
  affinity: {}
  # -- deployment topologySpreadConstraints
  topologySpreadConstraints: []
  # -- list of secret names to be added to deployment environment
  extraSecrets:
    - license-key
  # -- list of configmap names to be added to deployment environment
  extraCMS: []
  # -- pod security context
  podSecurityContext: {}
  # -- container security context
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault
  # -- app version
  version: 2.7.0-cloud
visual-anomaly:
  # -- enable visual-anomaly component
  enabled: false
  # -- pod security context
  podSecurityContext: {}
  # -- container security context
  containerSecurityContext: {}
  # -- using fixed number of replicas if autoscaling is not enabled
  replicaCount: 1
  autoscaling:
    # -- if enabled, deployment will be autoscaled
    enabled: false
    # -- min replicas hpa will scale down to
    minReplicas: 1
    # -- max replicas hpa will scale up to
    maxReplicas: 1
    memory:
      # -- if enabled, hpa will scale based on memory usage
      enabled: false
      # -- target memory usage percentage
      target: 80
    cpu:
      # -- if enabled, hpa will scale based on cpu usage
      enabled: true
      # -- target cpu usage percentage
      target: 80
  image:
    repository: us-central1-docker.pkg.dev/document-verification-public/docver-gcm/web-api-visual-anomaly
    tag: "1.3.0"
  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 300m
      memory: 0.5Gi
  # -- deployment node selector
  nodeSelector: {}
  # -- deployment tolerations
  tolerations: []
  # -- deployment podAnnotations
  podAnnotations: {}
  # -- deployment affinity
  affinity: {}
  ingress:
    enabled: false
    className: ""

anomdet-intermediary:
  # -- enable anomdet-intermediary component
  enabled: false
  # -- pod security context
  podSecurityContext: {}
  # -- container security context
  containerSecurityContext: {}
  replicaCount: 1
  autoscaling:
    # -- if enabled, deployment will be autoscaled
    enabled: false
    # -- min replicas hpa will scale down to
    minReplicas: 1
    # -- max replicas hpa will scale up to
    maxReplicas: 2
    # -- if set, hpa will scale based on cpu usage, target cpu usage percentage
    targetCPUUtilizationPercentage: 80
    # -- if set, hpa will scale based on memory usage, target memory usage percentage
    targetMemoryUtilizationPercentage: 80
  resources:
    limits:
      # -- deployment resource cpu limit
      cpu: 1
      # -- deployment resource memory limit
      memory: 1Gi
    requests:
      # -- deployment resource cpu requests
      cpu: 300m
      # -- deployment resource memory requests
      memory: 512Mi
  # -- deployment node selector
  nodeSelector: {}
  # -- deployment tolerations
  tolerations: []
  # -- deployment affinity
  affinity: {}

  # -- do not update anomdetIntermediaryConfig values, they are fixed for a specific docver release
  anomdetIntermediaryConfig:
    model-id: "6687ad3b04248f708c1e0c95"
    model-name: "visual-anomaly"
    collection-name: mdv-2005
    # -- each verification request will start ~200 queries, using 10000 to support have max of 50 RPS rate
    # -- without blocking the requests in a sequence
    parallel-queries: 10000
  image:
    repository: us-central1-docker.pkg.dev/document-verification-public/docver-gcm/anomaly-detection-intermediary/onprem
  ingress:
    enabled: false

embedding-store:
  # -- enable embedding-store component
  enabled: false
  seeder:
    enabled: false
    # -- pod security context
    podSecurityContext: {}
    # -- container security context
    containerSecurityContext: {}
    runAsPostUpgradeJob: false
    image: 
      repository: "us-central1-docker.pkg.dev/document-verification-public/docver-gcm/embedding-store/onprem"
    grpc:
      grpcRecvSize: "52428800"
      grpcSendSize: "52428800"
    config:
      collectionCreateWorkers: 200
      # -- this controlls the initialization rate of the embedding-store database.
      # -- increasing this value will speed up the initialization process, but it will also increase the load on the database
      # -- make sure the database can handle the load to prevent the database from crashing
      collectionInsertWorkers: 20
      collectionInsertBatch: 1
    seedStore:
      s3:
        enabled: false
      gc:
        enabled: true
        isPublic: true
        bucket: "document-verification-va-releases"
        prefix: "full-db-2005/6687ad3b04248f708c1e0c95"
    resources:
      limits:
        cpu: 1
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
  server:
    # -- pod security context
    podSecurityContext: {}
    # -- container security context
    containerSecurityContext: {}
    image: 
      repository: "us-central1-docker.pkg.dev/document-verification-public/docver-gcm/embedding-store/onprem"
    database:
      pgvector:
        enabled: true
        # If using external database, set this to a valid host and port
        # For example SaaS postgre in AWS or GCP
        addr: "postgresql:5432"
        # -- name of the database, if you are using an external database, set this to the name of the database
        database: postgres
        # -- set this to false if you are using an "external" SaaS database
        addrPrepandReleaseName: true
        connectionStringParams: "pool_max_conns=1000&pool_max_conn_idle_time=30s&pool_max_conn_lifetime=60s"
    grpc:
      grpcRecvSize: "52428800"
      grpcSendSize: "52428800"

    autoscaling:
      # -- if enabled, server deployment will be autoscaled
      enabled: false
      # -- min replicas hpa will scale down to
      minReplicas: 1
      # -- max replicas hpa will scale up to
      maxReplicas: 2
      # -- if set, hpa will scale based on cpu usage, target memory usage percentage
      targetCPUUtilizationPercentage: 80
      # -- if set, hpa will scale based on memory usage, target memory usage percentage
      targetMemoryUtilizationPercentage: 80

    # If facking with high RPS load, consider increasing the requirements
    resources:
      limits:
        cpu: 2
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
    
    # -- server deployment node selector
    nodeSelector: {}
    # -- server deployment tolerations
    tolerations: []
    # -- server deployment affinity  
    affinity: {}

    secret: mb-docver-db-creds


postgresql:
  # -- hosting postgres as part of this helm release is disabled by default, if you want to enable it, set enabled to true
  # -- Disabled, as we expect that the database will be hosted outside of this helm release, e.g in AWS RDS or GCP CloudSQL
  enabled: false
  image:
    registry: docker.io
    repository: ankane/pgvector
    tag: v0.5.1
    pullPolicy: IfNotPresent
  global:
    postgresql:
      auth:
        existingSecret: mb-docver-db-creds
        postgresqlDatabase: postgres
  auth:
    # -- must be fixed to this value, do not change
    username: embedding-store-sa
  # volumePermissions:
    # enabled: true
  primary:
    args: 
     - -c
     - config_file=/bitnami/postgresql/conf/postgresql.conf
    persistence:
      enabled: true
      ## -- change the storeage class to the one that is available in your kubernetes cluster
      storageClass: "default"
      size: 500Gi
    service:
      type: ClusterIP
    resources:
      limits:
        cpu: 10
        memory: "24Gi"
      requests:
        cpu: 6
        memory: "20Gi"
    nodeSelector: {}
    tolerations: []
    # Patch to prevent postgre chart bug
    affinity: {}
    livenessProbe:
      failureThreshold: 600
    configuration: |
      max_connections = 1000
      shared_buffers = 18GB
      effective_cache_size = 24GB
      maintenance_work_mem = 1GB
      checkpoint_completion_target = 0.9
      wal_buffers = 16MB
      default_statistics_target = 1000
      random_page_cost = 1.1
      effective_io_concurrency = 300
      work_mem = 2MB
      huge_pages = off
      min_wal_size = 2GB
      max_wal_size = 4GB
      max_worker_processes = 10
      max_parallel_workers_per_gather = 4
      max_parallel_workers = 10
      max_parallel_maintenance_workers = 4
      
      wal_level = minimal
      max_wal_senders = 0

      listen_addresses = '*'

mlp-local-storage:
  # -- enable this ONLY if you do not have dynamic storage provisioning in k8s cluster, likely using on-prem, baremetal k8s
  enabled: false
  StorageClass:
    - create: true
      name: microblink-docver
      provisioner: kubernetes.io/no-provisioner
  PersistentVolume:
    - volumenameprefix: test-tmp-delete-when-seen-
      storageClass:
        name: microblink-docver
        reclaimPolicy: Delete
      owner: 1001
      capacity: 1300Gi
      storageType: ssd
      nodes:
        - s1

bundle-visual-anomaly-core-versions:
  # -- enable bundle-visual-anomaly-core-versions component
  enabled: false
  bundle:
    serving:
      # -- pod security context
      podSecurityContext: {}
      # -- container security context
      containerSecurityContext: {}
      nginx:
        resolver: "kube-dns.kube-system.svc.cluster.local"
        dnsPolicy: ""
        dnsConfig: {}
        # -- pod security context
        podSecurityContext: {}
        # -- container security context
        containerSecurityContext: {}
        # -- pod annotations
        podAnnotations: {}
    proxy:
      # -- pod security context
      podSecurityContext: {}
      # -- container security context
      containerSecurityContext: {}
      image:
        repository: us-central1-docker.pkg.dev/document-verification-public/docver-gcm/mlp-model-proxy/onprem
        tag: v0.20.0
      minLimits:
        cpu: 500m
        memory: "1Gi"
      maxLimits:
        cpu: 2
        memory: "2Gi"
      ingress:
        enabled: false
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 3
        targetCPUUtilizationPercentage: "80"
      env:
        GOGC: "50"
    models:
      autoscaling:
        type: hpa
        minReplicas: 1
        maxReplicas: 3
      model:
        globalStorage:
            type: gs
            bucket: identity-enc-models-public
            isPublic: true
        storage:
            type: gs
            bucket: identity-enc-models-public
            isPublic: true
  models:
    6687ad3b04248f708c1e0c95:
      # Model resources can be reduced, however, it is not recommended if
      # the model is used in production. 
      minLimits:
        cpu: 2
        memory: "2Gi"
      maxLimits:
        cpu: 2
        memory: "2Gi"
      engine:
        type: "triton"
      # -- pod security context
      podSecurityContext: {}
      # -- container security context
      containerSecurityContext: {}
      initContainerSecurityContext: {}
      image:
        repository: "us-central1-docker.pkg.dev/document-verification-public/docver-gcm/tritonserver-cpu-onnxruntime/onprem"
        tag: "23.06"

bundle-doc-ver-core-versions:
  # -- enable bundle-doc-ver-core-versions component
  enabled: true
  fullnameOverride: "bundle-doc-ver-core-versions"
  bundle:
      serving:
          service:
              type: ClusterIP
              grpcPort: "80"
              httpPort: "8501"
          nginx:
              enabled: true
              resolver: coredns.kube-system
              timeout: 600s
              keepaliveRequests: "1000"
              keepalive: "320"
              liveness:
                  initialDelaySeconds: 15
                  periodSeconds: 15
              replicaCount: 1
              dnsPolicy: ""
              dnsConfig: {}
              podSecurityContext: {}
              containerSecurityContext: {}
              containerPort: "8080"
              port: "80"
          envoy:
              enabled: false
              liveness:
                  initialDelaySeconds: 15
                  periodSeconds: 15
              replicaCount: 1
              dnsPolicy: ""
              dnsConfig: {}
              podSecurityContext: {}
              containerSecurityContext: {}
              containerPort: "8080"
              port: "80"
          syncJob:
              podSecurityContext: {}
              containerSecurityContext: {}
      proxy:
          ingress:
              enabled: false
              host: ""
              className: nginx
              ssl:
                  enabled: true
                  redirect: true
                  force: false
              tls:
                  enabled: false
          image:
              repository: us-central1-docker.pkg.dev/document-verification-public/docver-gcm/mlp-model-proxy/onprem
              tag: v0.20.0
              pullPolicy: IfNotPresent
          service:
              type: ClusterIP
              grpcPort: "8005"
              httpPort: "8000"
          args:
              printfServiceNameFormat: ""
          autoscaling:
              enabled: false
              minReplicas: 0
              maxReplicas: 0
              targetCPUUtilizationPercentage: ""
              targetMemoryUtilizationPercentage: ""
          maxLimits:
              cpu: "2"
              memory: 2Gi
          minLimits:
              cpu: "1"
              memory: 1Gi
          labels: {}
          replicaCount: ""
          podAnnotations: {}
          podSecurityContext: {}
          containerSecurityContext: {}
          liveness:
              initialDelaySeconds: 15
              periodSeconds: 15
          readiness:
              initialDelaySeconds: 15
              periodSeconds: 15
          nodeSelector: {}
          affinity: {}
          tolerations: []
          env: {}
      models:
          image:
              repository: us-central1-docker.pkg.dev/document-verification-public/docver-gcm/tf-serving-kira-native-cpu/onprem
              tag: v2.13.0
              pullPolicy: IfNotPresent
          autoscaling:
              enabled: true
              type: hpa
              minReplicas: 1
              maxReplicas: 2
              targetCPUUtilizationPercentage: "80"
              targetMemoryUtilizationPercentage: ""
              targetRPS: ""
              targetConcurrency: ""
              initialScale: 1
              scaleDownDelay: 5m
              scaleStableWindow: 60s
          engine:
              type: tfServing
              batching:
                  enabled: false
                  max_enqueued_batches: ""
                  pad_variable_length_inputs: false
                  max_batch_size: ""
                  num_batch_threads: ""
                  batch_timeout_micros: ""
              parallelization:
                  enabled: true
                  intra_op: 0
                  inter_op: 0
              monitoring:
                  enabled: false
              grpc_max_threads: 0
          model:
            globalStorage:
                type: gs
                bucket: identity-enc-models-public
                isPublic: true
            storage:
                type: gs
                bucket: identity-enc-models-public
                isPublic: true
          liveness:
              initialDelaySeconds: 30
              periodSeconds: 30
          startup:
              failureThreshold: 30
              periodSeconds: 16
          maxLimits:
              cpu: "3"
              memory: 2Gi
              gpu: ""
          minLimits:
              cpu: "3"
              memory: 2Gi
              gpu: ""
          podAnnotations: {}
          podSecurityContext: {}
          containerSecurityContext: {}
          initContainerSecurityContext: {}
          env: {}
          readiness: {}
          nodeSelector: {}
          affinity: {}
          tolerations: []
          labels: {}
          replicaCount: ""
  models:
      66e2b36788703787163f0ecf:
          model:
              repository: photocopy-classifier-contextual-unified
              project: doc-ver
              version: 9.0.1
          engine:
            type: tfServing
            parallelization:
              enabled: true
              intra_op: 1
              inter_op: 1
          env:
            OMP_NUM_THREADS: 1
          minLimits:
            cpu: 1
            memory: "1Gi"
          maxLimits:
            cpu: 2
            memory: "1Gi"
          image:
              repository: us-central1-docker.pkg.dev/document-verification-public/docver-gcm/tf-serving-kira-native-cpu/onprem
              tag: v2.13.0
      66b61951fb85edd8517b6af6:
          model:
              repository: photo-fraud-classifier
              project: doc-ver
              version: 8.1.0
          engine:
            type: tfServing
            parallelization:
              enabled: true
              intra_op: 2
              inter_op: 2
          env:
            OMP_NUM_THREADS: 2
          minLimits:
            cpu: 2
            memory: "2Gi"
          maxLimits:
            cpu: 3
            memory: "2Gi"
          image:
              repository: us-central1-docker.pkg.dev/document-verification-public/docver-gcm/tf-serving-kira-native-cpu/onprem
              tag: v2.13.0


docver-runner:
  enabled: true
  fullnameOverride: docver-runner
  image:
    # -- deployment docker image repository
    repository: us-central1-docker.pkg.dev/document-verification-public/docver-gcm/web-api-runner
    # -- deployment docker image pull policy
    pullPolicy: Always
    # -- deployment docker image tag, if not set, version will be used as tag
    tag: "3.5.1"
  env:
    Executor__ModelServingUrl: "bundle-doc-ver-core-versions-mp:8005"
    Executor__ModelServingSsl: "false"
    ## MUST add this ENV variable if VA is enabled
    #Executor__GeneralAnomalyServerUrl: "doc-ver-visual-anomaly:8080"
  extraSecrets:
    - license-key
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 16
    cpu:
      enabled: true
      target: 70
    memory:
      enabled: true
      target: 70
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 2
      memory: 4Gi
  tolerations: []
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault