user nginx;
worker_processes  1;
events {
    worker_connections  10240;
}

http {
    error_log /var/log/nginx/error_server.log debug;
    resolver 127.0.0.11;

    upstream upstream_balancer {
    server 0.0.0.1; # placeholder

    balancer_by_lua_block {
        balancer.balance()
    }

    keepalive 320;

    keepalive_timeout  600s;
    keepalive_requests 1000;

    }

    server {
        listen       80 http2;
        server_name  localhost;

        location / {

        #header_filter_by_lua_block {
        #  local h = ngx.req.get_headers()
        #  for k, v in pairs(h) do
        #    ngx.log(ngx.ERR, "Got header "..k..": "..tostring(v)..";")
        #  end
        #}

        # tfServing 8500 port, triton 8001
        set_by_lua $loc '
            local routeMap = {
            s6478fcb410dcce6d3b037199 = "s6478fcb410dcce6d3b037199s:8001",
            s66a0a678fb85edd8517b6af5 = "s66a0a678fb85edd8517b6af5s:8500",
            s66a00cd7fb85edd8517b6af3 = "s66a00cd7fb85edd8517b6af3s:8500",
            }
            local modelId = ngx.req.get_headers()["model-id"]
            return routeMap["s" .. modelId]
        ';

        client_max_body_size 0;

        proxy_read_timeout 600s;
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;

        grpc_connect_timeout 600s;
        grpc_read_timeout 600s;
        grpc_send_timeout 600s;

        grpc_set_header Host $loc;
        grpc_pass $loc;
        }
        
        location = /health {
            access_log off;
            add_header 'Content-Type' 'application/json';
            return 200 '{"status":"UP"}';
        }
    }
}